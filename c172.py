import numpy as np
# блилиотека геометрических и аэродинамических параметров самолета cesna 172 в соотвестии 
# с параметрами для движка JSBsim
# геометрические параметры
Sw = 16.2     #м2 #Площадь крыла
b = 10.91184  #м  #Размах
c = 1.49352   #м  #Хорда
mass = 1043.2
inertia = np.diag([948, 1346, 1967])*1.35581

# Коэфиценты силы лобового сопротивления 
# нулевый коэфециент лобогово сопотивления 



Cx0 = 0.026



Cx_alpha =np.array([[-0.0873, 0.0041, 0.0000, 0.0005, 0.0014],
                   [-0.0698, 0.0013, 0.0004, 0.0025, 0.0041],
                   [-0.0524, 0.0001, 0.0023, 0.0059, 0.0084],
                   [-0.0349, 0.0003, 0.0057, 0.0108, 0.0141],
                   [-0.0175, 0.0020, 0.0105, 0.0172, 0.0212],
                   [0.0000, 0.0052, 0.0168, 0.0251, 0.0299],
                   [0.0175, 0.0099, 0.0248, 0.0346, 0.0402],
                   [0.0349, 0.0162, 0.0342, 0.0457, 0.0521],
                   [0.0524, 0.0240, 0.0452, 0.0583, 0.0655],
                   [0.0698, 0.0334, 0.0577, 0.0724, 0.0804],
                   [0.0873, 0.0442, 0.0718, 0.0881, 0.0968],
                   [0.1047, 0.0566, 0.0874, 0.1053, 0.1148],
                   [0.1222, 0.0706, 0.1045, 0.1240, 0.1343],
                   [0.1396, 0.0860, 0.1232, 0.1442, 0.1554],
                   [0.1571, 0.0962, 0.1353, 0.1573, 0.1690],
                   [0.1745, 0.1069, 0.1479, 0.1708, 0.1830],
                   [0.1920, 0.1180, 0.1610, 0.1849, 0.1975],
                   [0.2094, 0.1298, 0.1746, 0.1995, 0.2126],
                   [0.2269, 0.1424, 0.1892, 0.2151, 0.2286],
                   [0.2443, 0.1565, 0.2054, 0.2323, 0.2464],
                   [0.2618, 0.1727, 0.2240, 0.2521, 0.2667],
                   [0.2793, 0.1782, 0.2302, 0.2587, 0.2735],
                   [0.2967, 0.1716, 0.2227, 0.2507, 0.2653],
                   [0.3142, 0.1618, 0.2115, 0.2388, 0.2531],
                   [0.3316, 0.1475, 0.1951, 0.2214, 0.2351],
                   [0.3491, 0.1097, 0.1512, 0.1744, 0.1866]])

Сx_betta = 0.170

def get_Cx(alpha,betta):
    Cx = Cx0 + np.interp(alpha,Cx_alpha.T[0],Cx_alpha.T[1]) +Сx_betta*betta
    return Cx

# коэффиценет боковой силы 
#
Cz_betta=np.array([[-0.3490, 0.1370],
                   [0.0000, 0.0000], 
                   [0.3490, -0.1370]])
Сz_eleron = -0.05
Cz_rudder = 0.1870

Сz_roll_rate = - 0.0370

Cz_yaw_rate = 0.210
            
def get_Cz(alpha,betta,w,ruder,eleron,V_abs):
    Cz = np.interp(betta,Cz_betta.T[0],Cz_betta.T[1]) + Cz_rudder*ruder + Сz_roll_rate*(b/(2.0 * V_abs))*w[0] +  Cz_yaw_rate*(b/(2.0 * V_abs))*w[1]
    return Cz

# коэфицент подьемной силы 
Сy_alpha = np.array([[-0.0900, -0.2200, -0.2200],
                     [0.0000, 0.2500, 0.2500],
                     [0.0900, 0.7300, 0.7300],
                     [0.1000, 0.8300, 0.7800],
                     [0.1200, 0.9200, 0.7900],
                     [0.1400, 1.0200, 0.8100],
                     [0.1600, 1.0800, 0.8200],
                     [0.1700, 1.1300, 0.8300],
                     [0.1900, 1.1900, 0.8500],
                     [0.2100, 1.2500, 0.8600],
                     [0.2400, 1.3500, 0.8800],
                     [0.2600, 1.4400, 0.9000],
                     [0.2800, 1.4700, 0.9200],
                     [0.3000, 1.4300, 0.9500],
                     [0.3200, 1.3800, 0.9900],
                     [0.3400, 1.3000, 1.0500],
                     [0.3600, 1.1500, 1.1500]])


Cy_elevator = 0.347
Cy_alpha_dot = 1.7
Cy_pitch = 3.9
def get_Cy(alpha,alpha_dot,elevator,w,V_abs):
    Cy1=np.interp(alpha,Сy_alpha.T[0],Сy_alpha.T[1])
    Cy2=Cy_elevator*elevator 
    Cy3 = Cy_alpha_dot*(c/(2.0 * V_abs))*alpha_dot
    Cy4 =  Cy_pitch*(c/(2.0 * V_abs))*w[2]
    Cy =  Cy1+Cy2 + Cy3 + Cy4
    return Cy

# момент вращения по крену( вдоль продольной оси ЛА)
mx_betta=np.array([[-0.3490, 0.0322],
                    [0.0000, 0.0000],
                    [0.3490, -0.0322]])
mx_yaw_rate =np.array([[0.0000, 0.0798],	
                       [0.0940, 0.1869]])
mx_aileron = 0.2290
mx_roll_rate = -0.4840
mx_rudder = 0.0147
def get_mx(alfa,betta,w,V_abs,aileron,rudder):
    mx = np.interp(betta,mx_betta.T[0],mx_betta.T[1]) + mx_roll_rate *(b/(2.0 * V_abs))*w[0] +np.interp(alfa,mx_yaw_rate.T[0],mx_yaw_rate.T[1])*(b/(2.0*V_abs))*w[1] + mx_aileron * aileron + mx_rudder*rudder
    return mx

# момент по тангажу 
mz_0 = 0.025000
mz_alfa = -1.8000
mz_pitch_rate = -12.4000
mz_alfa_dot = -5.2000
mz_elevator = -1.280
def get_mz(alfa,alfa_dot,w,V_abs,elevator):
    mz = mz_0 + mz_alfa*alfa + mz_pitch_rate*(c/(2.0*V_abs))*w[2] + mz_alfa_dot*alfa_dot*(c/(2.0*V_abs)) +mz_elevator*elevator
    return mz
# момент по курсу 
my_betta = np.array([[-0.3490, -0.0205],
                     [0.0000, 0.0000],
                     [0.3490, 0.0205]])  
my_roll_rate = 0.0278
my_yaw_rate = -0.0937
my_aileron = -0.0053
my_rudder = -0.0430
def get_my(betta,w,V_abs,rudder,aileron):
    my = np.interp(betta,my_betta.T[0],my_betta.T[1]) + my_roll_rate*(b/(2.0 *V_abs))*w[0] + my_yaw_rate*(b/(2.0 *V_abs))*w[1] + my_aileron*aileron + my_rudder*rudder
    return my

